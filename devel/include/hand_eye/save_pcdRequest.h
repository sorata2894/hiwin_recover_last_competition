// Generated by gencpp from file hand_eye/save_pcdRequest.msg
// DO NOT EDIT!


#ifndef HAND_EYE_MESSAGE_SAVE_PCDREQUEST_H
#define HAND_EYE_MESSAGE_SAVE_PCDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_eye
{
template <class ContainerAllocator>
struct save_pcdRequest_
{
  typedef save_pcdRequest_<ContainerAllocator> Type;

  save_pcdRequest_()
    : name()
    , save_mix(false)
    , curr_trans()  {
    }
  save_pcdRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , save_mix(false)
    , curr_trans(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _save_mix_type;
  _save_mix_type save_mix;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _curr_trans_type;
  _curr_trans_type curr_trans;





  typedef boost::shared_ptr< ::hand_eye::save_pcdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_eye::save_pcdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct save_pcdRequest_

typedef ::hand_eye::save_pcdRequest_<std::allocator<void> > save_pcdRequest;

typedef boost::shared_ptr< ::hand_eye::save_pcdRequest > save_pcdRequestPtr;
typedef boost::shared_ptr< ::hand_eye::save_pcdRequest const> save_pcdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_eye::save_pcdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_eye::save_pcdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_eye::save_pcdRequest_<ContainerAllocator1> & lhs, const ::hand_eye::save_pcdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.save_mix == rhs.save_mix &&
    lhs.curr_trans == rhs.curr_trans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_eye::save_pcdRequest_<ContainerAllocator1> & lhs, const ::hand_eye::save_pcdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_eye::save_pcdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_eye::save_pcdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_eye::save_pcdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c07f114cbbea4072f42229e881072e67";
  }

  static const char* value(const ::hand_eye::save_pcdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc07f114cbbea4072ULL;
  static const uint64_t static_value2 = 0xf42229e881072e67ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_eye/save_pcdRequest";
  }

  static const char* value(const ::hand_eye::save_pcdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string    name\n"
"bool      save_mix\n"
"float64[] curr_trans\n"
"\n"
;
  }

  static const char* value(const ::hand_eye::save_pcdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.save_mix);
      stream.next(m.curr_trans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct save_pcdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_eye::save_pcdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_eye::save_pcdRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "save_mix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.save_mix);
    s << indent << "curr_trans[]" << std::endl;
    for (size_t i = 0; i < v.curr_trans.size(); ++i)
    {
      s << indent << "  curr_trans[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.curr_trans[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_EYE_MESSAGE_SAVE_PCDREQUEST_H
