// Generated by gencpp from file hand_eye/hand_eye_calibrationRequest.msg
// DO NOT EDIT!


#ifndef HAND_EYE_MESSAGE_HAND_EYE_CALIBRATIONREQUEST_H
#define HAND_EYE_MESSAGE_HAND_EYE_CALIBRATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace hand_eye
{
template <class ContainerAllocator>
struct hand_eye_calibrationRequest_
{
  typedef hand_eye_calibrationRequest_<ContainerAllocator> Type;

  hand_eye_calibrationRequest_()
    : cmd()
    , end_trans()  {
    }
  hand_eye_calibrationRequest_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , end_trans(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _end_trans_type;
  _end_trans_type end_trans;





  typedef boost::shared_ptr< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct hand_eye_calibrationRequest_

typedef ::hand_eye::hand_eye_calibrationRequest_<std::allocator<void> > hand_eye_calibrationRequest;

typedef boost::shared_ptr< ::hand_eye::hand_eye_calibrationRequest > hand_eye_calibrationRequestPtr;
typedef boost::shared_ptr< ::hand_eye::hand_eye_calibrationRequest const> hand_eye_calibrationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator1> & lhs, const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.end_trans == rhs.end_trans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator1> & lhs, const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bd7467818137612ca9b122514057be8";
  }

  static const char* value(const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bd7467818137612ULL;
  static const uint64_t static_value2 = 0xca9b122514057be8ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_eye/hand_eye_calibrationRequest";
  }

  static const char* value(const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string                  cmd\n"
"geometry_msgs/Transform end_trans\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.end_trans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hand_eye_calibrationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_eye::hand_eye_calibrationRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
    s << indent << "end_trans: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.end_trans);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_EYE_MESSAGE_HAND_EYE_CALIBRATIONREQUEST_H
