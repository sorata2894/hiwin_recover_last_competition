// Generated by gencpp from file hand_eye/aruco_infoResponse.msg
// DO NOT EDIT!


#ifndef HAND_EYE_MESSAGE_ARUCO_INFORESPONSE_H
#define HAND_EYE_MESSAGE_ARUCO_INFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_eye
{
template <class ContainerAllocator>
struct aruco_infoResponse_
{
  typedef aruco_infoResponse_<ContainerAllocator> Type;

  aruco_infoResponse_()
    : ids()
    , tvecs()
    , rvecs()  {
    }
  aruco_infoResponse_(const ContainerAllocator& _alloc)
    : ids(_alloc)
    , tvecs(_alloc)
    , rvecs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _ids_type;
  _ids_type ids;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tvecs_type;
  _tvecs_type tvecs;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rvecs_type;
  _rvecs_type rvecs;





  typedef boost::shared_ptr< ::hand_eye::aruco_infoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_eye::aruco_infoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct aruco_infoResponse_

typedef ::hand_eye::aruco_infoResponse_<std::allocator<void> > aruco_infoResponse;

typedef boost::shared_ptr< ::hand_eye::aruco_infoResponse > aruco_infoResponsePtr;
typedef boost::shared_ptr< ::hand_eye::aruco_infoResponse const> aruco_infoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_eye::aruco_infoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_eye::aruco_infoResponse_<ContainerAllocator1> & lhs, const ::hand_eye::aruco_infoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ids == rhs.ids &&
    lhs.tvecs == rhs.tvecs &&
    lhs.rvecs == rhs.rvecs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_eye::aruco_infoResponse_<ContainerAllocator1> & lhs, const ::hand_eye::aruco_infoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_eye

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_eye::aruco_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_eye::aruco_infoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_eye::aruco_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c86bfd11a5f6ab9f79643988c45acbb";
  }

  static const char* value(const ::hand_eye::aruco_infoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c86bfd11a5f6ab9ULL;
  static const uint64_t static_value2 = 0xf79643988c45acbbULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_eye/aruco_infoResponse";
  }

  static const char* value(const ::hand_eye::aruco_infoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int64[]   ids\n"
"float64[] tvecs\n"
"float64[] rvecs\n"
"\n"
;
  }

  static const char* value(const ::hand_eye::aruco_infoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
      stream.next(m.tvecs);
      stream.next(m.rvecs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct aruco_infoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_eye::aruco_infoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_eye::aruco_infoResponse_<ContainerAllocator>& v)
  {
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "tvecs[]" << std::endl;
    for (size_t i = 0; i < v.tvecs.size(); ++i)
    {
      s << indent << "  tvecs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tvecs[i]);
    }
    s << indent << "rvecs[]" << std::endl;
    for (size_t i = 0; i < v.rvecs.size(); ++i)
    {
      s << indent << "  rvecs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rvecs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_EYE_MESSAGE_ARUCO_INFORESPONSE_H
