// Generated by gencpp from file control_node/robot_info.msg
// DO NOT EDIT!


#ifndef CONTROL_NODE_MESSAGE_ROBOT_INFO_H
#define CONTROL_NODE_MESSAGE_ROBOT_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_node
{
template <class ContainerAllocator>
struct robot_info_
{
  typedef robot_info_<ContainerAllocator> Type;

  robot_info_()
    : curr_pose()
    , tool_coor()
    , base_coor()  {
    }
  robot_info_(const ContainerAllocator& _alloc)
    : curr_pose(_alloc)
    , tool_coor(_alloc)
    , base_coor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _curr_pose_type;
  _curr_pose_type curr_pose;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_coor_type;
  _tool_coor_type tool_coor;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _base_coor_type;
  _base_coor_type base_coor;





  typedef boost::shared_ptr< ::control_node::robot_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_node::robot_info_<ContainerAllocator> const> ConstPtr;

}; // struct robot_info_

typedef ::control_node::robot_info_<std::allocator<void> > robot_info;

typedef boost::shared_ptr< ::control_node::robot_info > robot_infoPtr;
typedef boost::shared_ptr< ::control_node::robot_info const> robot_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_node::robot_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_node::robot_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_node::robot_info_<ContainerAllocator1> & lhs, const ::control_node::robot_info_<ContainerAllocator2> & rhs)
{
  return lhs.curr_pose == rhs.curr_pose &&
    lhs.tool_coor == rhs.tool_coor &&
    lhs.base_coor == rhs.base_coor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_node::robot_info_<ContainerAllocator1> & lhs, const ::control_node::robot_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::control_node::robot_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_node::robot_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_node::robot_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_node::robot_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_node::robot_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_node::robot_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_node::robot_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "495061eec8ab7a1d80f5e29c62b58a6e";
  }

  static const char* value(const ::control_node::robot_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x495061eec8ab7a1dULL;
  static const uint64_t static_value2 = 0x80f5e29c62b58a6eULL;
};

template<class ContainerAllocator>
struct DataType< ::control_node::robot_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_node/robot_info";
  }

  static const char* value(const ::control_node::robot_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_node::robot_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[]  curr_pose\n"
"float64[]  tool_coor\n"
"float64[]  base_coor\n"
;
  }

  static const char* value(const ::control_node::robot_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_node::robot_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.curr_pose);
      stream.next(m.tool_coor);
      stream.next(m.base_coor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_node::robot_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_node::robot_info_<ContainerAllocator>& v)
  {
    s << indent << "curr_pose[]" << std::endl;
    for (size_t i = 0; i < v.curr_pose.size(); ++i)
    {
      s << indent << "  curr_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.curr_pose[i]);
    }
    s << indent << "tool_coor[]" << std::endl;
    for (size_t i = 0; i < v.tool_coor.size(); ++i)
    {
      s << indent << "  tool_coor[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_coor[i]);
    }
    s << indent << "base_coor[]" << std::endl;
    for (size_t i = 0; i < v.base_coor.size(); ++i)
    {
      s << indent << "  base_coor[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.base_coor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_NODE_MESSAGE_ROBOT_INFO_H
